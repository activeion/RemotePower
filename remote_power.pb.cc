// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_power.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "remote_power.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eh2tech {
class LoginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Login> {
} _Login_default_instance_;
class AnswerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Answer> {
} _Answer_default_instance_;
class QueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Query> {
} _Query_default_instance_;
class QueryAnswerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryAnswer> {
} _QueryAnswer_default_instance_;
class Setting_CatFreqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Setting_CatFreq> {
} _Setting_CatFreq_default_instance_;
class SettingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Setting> {
} _Setting_default_instance_;
class EmptyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Empty> {
} _Empty_default_instance_;

namespace protobuf_remote_5fpower_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, err_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Answer, comments_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, cat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAnswer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAnswer, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAnswer, cat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAnswer, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAnswer, comments_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting_CatFreq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting_CatFreq, cat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting_CatFreq, freq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, catfreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, action_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, id_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Login)},
  { 8, -1, sizeof(Answer)},
  { 16, -1, sizeof(Query)},
  { 24, -1, sizeof(QueryAnswer)},
  { 34, -1, sizeof(Setting_CatFreq)},
  { 41, -1, sizeof(Setting)},
  { 49, -1, sizeof(Empty)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Answer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryAnswer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Setting_CatFreq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Setting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Empty_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "remote_power.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Login_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Answer_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Query_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _QueryAnswer_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Setting_CatFreq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Setting_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Empty_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Login_default_instance_.DefaultConstruct();
  _Answer_default_instance_.DefaultConstruct();
  _Query_default_instance_.DefaultConstruct();
  _QueryAnswer_default_instance_.DefaultConstruct();
  _Setting_CatFreq_default_instance_.DefaultConstruct();
  _Setting_default_instance_.DefaultConstruct();
  _Empty_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022remote_power.proto\022\007eh2tech\"\?\n\005Login\022\n"
      "\n\002id\030\001 \001(\003\022\n\n\002sn\030\002 \001(\t\022\020\n\010password\030\003 \001(\t"
      "J\004\010\017\020\020J\006\010\377\017\020\200\020\"6\n\006Answer\022\n\n\002id\030\001 \001(\003\022\016\n\006"
      "err_no\030\002 \001(\003\022\020\n\010comments\030\003 \001(\t\">\n\005Query\022"
      "\n\n\002id\030\001 \001(\003\022\n\n\002sn\030\002 \001(\t\022\035\n\003cat\030\003 \001(\0162\020.e"
      "h2tech.Catalog\"R\n\013QueryAnswer\022\n\n\002id\030\001 \001("
      "\003\022\n\n\002sn\030\002 \001(\t\022\013\n\003cat\030\003 \001(\003\022\014\n\004data\030\004 \003(\003"
      "\022\020\n\010comments\030\005 \001(\t\"\316\001\n\007Setting\022\n\n\002id\030\001 \001"
      "(\003\022)\n\007catfreq\030\002 \003(\0132\030.eh2tech.Setting.Ca"
      "tFreq\022\'\n\006action\030\003 \001(\0162\027.eh2tech.Setting."
      "Action\0326\n\007CatFreq\022\035\n\003cat\030\001 \001(\0162\020.eh2tech"
      ".Catalog\022\014\n\004freq\030\002 \001(\r\"+\n\006Action\022\010\n\004NONE"
      "\020\000\022\t\n\005START\020\001\022\014\n\010SHUTDOWN\020\002\"\023\n\005Empty\022\n\n\002"
      "id\030\001 \001(\005*3\n\007Catalog\022\t\n\005POWER\020\000\022\010\n\004TEMP\020\001"
      "\022\010\n\004FLOW\020\002\022\t\n\005PRESS\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 589);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "remote_power.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_remote_5fpower_2eproto

const ::google::protobuf::EnumDescriptor* Setting_Action_descriptor() {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_enum_descriptors[0];
}
bool Setting_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Setting_Action Setting::NONE;
const Setting_Action Setting::START;
const Setting_Action Setting::SHUTDOWN;
const Setting_Action Setting::Action_MIN;
const Setting_Action Setting::Action_MAX;
const int Setting::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Catalog_descriptor() {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_enum_descriptors[1];
}
bool Catalog_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login::kIdFieldNumber;
const int Login::kSnFieldNumber;
const int Login::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_remote_5fpower_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eh2tech.Login)
}
Login::Login(const Login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sn().size() > 0) {
    sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:eh2tech.Login)
}

void Login::SharedCtor() {
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:eh2tech.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  sn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Login& Login::default_instance() {
  protobuf_remote_5fpower_2eproto::InitDefaults();
  return *internal_default_instance();
}

Login* Login::New(::google::protobuf::Arena* arena) const {
  Login* n = new Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:eh2tech.Login)
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eh2tech.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eh2tech.Login.sn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eh2tech.Login.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eh2tech.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eh2tech.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eh2tech.Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string sn = 2;
  if (this->sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.Login.sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sn(), output);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.Login.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:eh2tech.Login)
}

::google::protobuf::uint8* Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eh2tech.Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string sn = 2;
  if (this->sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.Login.sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sn(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.Login.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eh2tech.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eh2tech.Login)
  size_t total_size = 0;

  // string sn = 2;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sn());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eh2tech.Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eh2tech.Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eh2tech.Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eh2tech.Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn().size() > 0) {

    sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eh2tech.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eh2tech.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  sn_.Swap(&other->sn_);
  password_.Swap(&other->password_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Login

// int64 id = 1;
void Login::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Login::id() const {
  // @@protoc_insertion_point(field_get:eh2tech.Login.id)
  return id_;
}
void Login::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Login.id)
}

// string sn = 2;
void Login::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Login::sn() const {
  // @@protoc_insertion_point(field_get:eh2tech.Login.sn)
  return sn_.GetNoArena();
}
void Login::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eh2tech.Login.sn)
}
#if LANG_CXX11
void Login::set_sn(::std::string&& value) {
  
  sn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eh2tech.Login.sn)
}
#endif
void Login::set_sn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eh2tech.Login.sn)
}
void Login::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eh2tech.Login.sn)
}
::std::string* Login::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:eh2tech.Login.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_sn() {
  // @@protoc_insertion_point(field_release:eh2tech.Login.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:eh2tech.Login.sn)
}

// string password = 3;
void Login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:eh2tech.Login.password)
  return password_.GetNoArena();
}
void Login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eh2tech.Login.password)
}
#if LANG_CXX11
void Login::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eh2tech.Login.password)
}
#endif
void Login::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eh2tech.Login.password)
}
void Login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eh2tech.Login.password)
}
::std::string* Login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:eh2tech.Login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_password() {
  // @@protoc_insertion_point(field_release:eh2tech.Login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:eh2tech.Login.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Answer::kIdFieldNumber;
const int Answer::kErrNoFieldNumber;
const int Answer::kCommentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Answer::Answer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_remote_5fpower_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eh2tech.Answer)
}
Answer::Answer(const Answer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comments_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comments().size() > 0) {
    comments_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comments_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&id_) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:eh2tech.Answer)
}

void Answer::SharedCtor() {
  comments_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&id_) + sizeof(err_no_));
  _cached_size_ = 0;
}

Answer::~Answer() {
  // @@protoc_insertion_point(destructor:eh2tech.Answer)
  SharedDtor();
}

void Answer::SharedDtor() {
  comments_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Answer::descriptor() {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Answer& Answer::default_instance() {
  protobuf_remote_5fpower_2eproto::InitDefaults();
  return *internal_default_instance();
}

Answer* Answer::New(::google::protobuf::Arena* arena) const {
  Answer* n = new Answer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Answer::Clear() {
// @@protoc_insertion_point(message_clear_start:eh2tech.Answer)
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&id_) + sizeof(err_no_));
}

bool Answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eh2tech.Answer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 err_no = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &err_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eh2tech.Answer.comments"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eh2tech.Answer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eh2tech.Answer)
  return false;
#undef DO_
}

void Answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eh2tech.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // int64 err_no = 2;
  if (this->err_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->err_no(), output);
  }

  // string comments = 3;
  if (this->comments().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.Answer.comments");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comments(), output);
  }

  // @@protoc_insertion_point(serialize_end:eh2tech.Answer)
}

::google::protobuf::uint8* Answer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eh2tech.Answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // int64 err_no = 2;
  if (this->err_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->err_no(), target);
  }

  // string comments = 3;
  if (this->comments().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.Answer.comments");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comments(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eh2tech.Answer)
  return target;
}

size_t Answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eh2tech.Answer)
  size_t total_size = 0;

  // string comments = 3;
  if (this->comments().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comments());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 err_no = 2;
  if (this->err_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->err_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Answer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eh2tech.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  const Answer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Answer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eh2tech.Answer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eh2tech.Answer)
    MergeFrom(*source);
  }
}

void Answer::MergeFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eh2tech.Answer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comments().size() > 0) {

    comments_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comments_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.err_no() != 0) {
    set_err_no(from.err_no());
  }
}

void Answer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eh2tech.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Answer::CopyFrom(const Answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eh2tech.Answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Answer::IsInitialized() const {
  return true;
}

void Answer::Swap(Answer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Answer::InternalSwap(Answer* other) {
  comments_.Swap(&other->comments_);
  std::swap(id_, other->id_);
  std::swap(err_no_, other->err_no_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Answer::GetMetadata() const {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Answer

// int64 id = 1;
void Answer::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Answer::id() const {
  // @@protoc_insertion_point(field_get:eh2tech.Answer.id)
  return id_;
}
void Answer::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Answer.id)
}

// int64 err_no = 2;
void Answer::clear_err_no() {
  err_no_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Answer::err_no() const {
  // @@protoc_insertion_point(field_get:eh2tech.Answer.err_no)
  return err_no_;
}
void Answer::set_err_no(::google::protobuf::int64 value) {
  
  err_no_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Answer.err_no)
}

// string comments = 3;
void Answer::clear_comments() {
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Answer::comments() const {
  // @@protoc_insertion_point(field_get:eh2tech.Answer.comments)
  return comments_.GetNoArena();
}
void Answer::set_comments(const ::std::string& value) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eh2tech.Answer.comments)
}
#if LANG_CXX11
void Answer::set_comments(::std::string&& value) {
  
  comments_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eh2tech.Answer.comments)
}
#endif
void Answer::set_comments(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eh2tech.Answer.comments)
}
void Answer::set_comments(const char* value, size_t size) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eh2tech.Answer.comments)
}
::std::string* Answer::mutable_comments() {
  
  // @@protoc_insertion_point(field_mutable:eh2tech.Answer.comments)
  return comments_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Answer::release_comments() {
  // @@protoc_insertion_point(field_release:eh2tech.Answer.comments)
  
  return comments_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Answer::set_allocated_comments(::std::string* comments) {
  if (comments != NULL) {
    
  } else {
    
  }
  comments_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comments);
  // @@protoc_insertion_point(field_set_allocated:eh2tech.Answer.comments)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query::kIdFieldNumber;
const int Query::kSnFieldNumber;
const int Query::kCatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query::Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_remote_5fpower_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eh2tech.Query)
}
Query::Query(const Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sn().size() > 0) {
    sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&cat_) -
    reinterpret_cast<char*>(&id_) + sizeof(cat_));
  // @@protoc_insertion_point(copy_constructor:eh2tech.Query)
}

void Query::SharedCtor() {
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&cat_) -
    reinterpret_cast<char*>(&id_) + sizeof(cat_));
  _cached_size_ = 0;
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:eh2tech.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  sn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Query& Query::default_instance() {
  protobuf_remote_5fpower_2eproto::InitDefaults();
  return *internal_default_instance();
}

Query* Query::New(::google::protobuf::Arena* arena) const {
  Query* n = new Query;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:eh2tech.Query)
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&cat_) -
    reinterpret_cast<char*>(&id_) + sizeof(cat_));
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eh2tech.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eh2tech.Query.sn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eh2tech.Catalog cat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cat(static_cast< ::eh2tech::Catalog >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eh2tech.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eh2tech.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eh2tech.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string sn = 2;
  if (this->sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.Query.sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sn(), output);
  }

  // .eh2tech.Catalog cat = 3;
  if (this->cat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cat(), output);
  }

  // @@protoc_insertion_point(serialize_end:eh2tech.Query)
}

::google::protobuf::uint8* Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eh2tech.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string sn = 2;
  if (this->sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.Query.sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sn(), target);
  }

  // .eh2tech.Catalog cat = 3;
  if (this->cat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cat(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eh2tech.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eh2tech.Query)
  size_t total_size = 0;

  // string sn = 2;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sn());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .eh2tech.Catalog cat = 3;
  if (this->cat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eh2tech.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eh2tech.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eh2tech.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eh2tech.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn().size() > 0) {

    sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cat() != 0) {
    set_cat(from.cat());
  }
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eh2tech.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eh2tech.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::Swap(Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query::InternalSwap(Query* other) {
  sn_.Swap(&other->sn_);
  std::swap(id_, other->id_);
  std::swap(cat_, other->cat_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Query

// int64 id = 1;
void Query::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Query::id() const {
  // @@protoc_insertion_point(field_get:eh2tech.Query.id)
  return id_;
}
void Query::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Query.id)
}

// string sn = 2;
void Query::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Query::sn() const {
  // @@protoc_insertion_point(field_get:eh2tech.Query.sn)
  return sn_.GetNoArena();
}
void Query::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eh2tech.Query.sn)
}
#if LANG_CXX11
void Query::set_sn(::std::string&& value) {
  
  sn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eh2tech.Query.sn)
}
#endif
void Query::set_sn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eh2tech.Query.sn)
}
void Query::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eh2tech.Query.sn)
}
::std::string* Query::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:eh2tech.Query.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Query::release_sn() {
  // @@protoc_insertion_point(field_release:eh2tech.Query.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Query::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:eh2tech.Query.sn)
}

// .eh2tech.Catalog cat = 3;
void Query::clear_cat() {
  cat_ = 0;
}
::eh2tech::Catalog Query::cat() const {
  // @@protoc_insertion_point(field_get:eh2tech.Query.cat)
  return static_cast< ::eh2tech::Catalog >(cat_);
}
void Query::set_cat(::eh2tech::Catalog value) {
  
  cat_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Query.cat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryAnswer::kIdFieldNumber;
const int QueryAnswer::kSnFieldNumber;
const int QueryAnswer::kCatFieldNumber;
const int QueryAnswer::kDataFieldNumber;
const int QueryAnswer::kCommentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryAnswer::QueryAnswer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_remote_5fpower_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eh2tech.QueryAnswer)
}
QueryAnswer::QueryAnswer(const QueryAnswer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sn().size() > 0) {
    sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
  }
  comments_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comments().size() > 0) {
    comments_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comments_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&cat_) -
    reinterpret_cast<char*>(&id_) + sizeof(cat_));
  // @@protoc_insertion_point(copy_constructor:eh2tech.QueryAnswer)
}

void QueryAnswer::SharedCtor() {
  sn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&cat_) -
    reinterpret_cast<char*>(&id_) + sizeof(cat_));
  _cached_size_ = 0;
}

QueryAnswer::~QueryAnswer() {
  // @@protoc_insertion_point(destructor:eh2tech.QueryAnswer)
  SharedDtor();
}

void QueryAnswer::SharedDtor() {
  sn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAnswer::descriptor() {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryAnswer& QueryAnswer::default_instance() {
  protobuf_remote_5fpower_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryAnswer* QueryAnswer::New(::google::protobuf::Arena* arena) const {
  QueryAnswer* n = new QueryAnswer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:eh2tech.QueryAnswer)
  data_.Clear();
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&cat_) -
    reinterpret_cast<char*>(&id_) + sizeof(cat_));
}

bool QueryAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eh2tech.QueryAnswer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eh2tech.QueryAnswer.sn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comments = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "eh2tech.QueryAnswer.comments"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eh2tech.QueryAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eh2tech.QueryAnswer)
  return false;
#undef DO_
}

void QueryAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eh2tech.QueryAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string sn = 2;
  if (this->sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.QueryAnswer.sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sn(), output);
  }

  // int64 cat = 3;
  if (this->cat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cat(), output);
  }

  // repeated int64 data = 4;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->data(i), output);
  }

  // string comments = 5;
  if (this->comments().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.QueryAnswer.comments");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->comments(), output);
  }

  // @@protoc_insertion_point(serialize_end:eh2tech.QueryAnswer)
}

::google::protobuf::uint8* QueryAnswer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eh2tech.QueryAnswer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string sn = 2;
  if (this->sn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.QueryAnswer.sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sn(), target);
  }

  // int64 cat = 3;
  if (this->cat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cat(), target);
  }

  // repeated int64 data = 4;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->data_, target);
  }

  // string comments = 5;
  if (this->comments().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "eh2tech.QueryAnswer.comments");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comments(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eh2tech.QueryAnswer)
  return target;
}

size_t QueryAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eh2tech.QueryAnswer)
  size_t total_size = 0;

  // repeated int64 data = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string sn = 2;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sn());
  }

  // string comments = 5;
  if (this->comments().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comments());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 cat = 3;
  if (this->cat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAnswer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eh2tech.QueryAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryAnswer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryAnswer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eh2tech.QueryAnswer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eh2tech.QueryAnswer)
    MergeFrom(*source);
  }
}

void QueryAnswer::MergeFrom(const QueryAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eh2tech.QueryAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.sn().size() > 0) {

    sn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sn_);
  }
  if (from.comments().size() > 0) {

    comments_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comments_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cat() != 0) {
    set_cat(from.cat());
  }
}

void QueryAnswer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eh2tech.QueryAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAnswer::CopyFrom(const QueryAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eh2tech.QueryAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAnswer::IsInitialized() const {
  return true;
}

void QueryAnswer::Swap(QueryAnswer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryAnswer::InternalSwap(QueryAnswer* other) {
  data_.InternalSwap(&other->data_);
  sn_.Swap(&other->sn_);
  comments_.Swap(&other->comments_);
  std::swap(id_, other->id_);
  std::swap(cat_, other->cat_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryAnswer::GetMetadata() const {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryAnswer

// int64 id = 1;
void QueryAnswer::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QueryAnswer::id() const {
  // @@protoc_insertion_point(field_get:eh2tech.QueryAnswer.id)
  return id_;
}
void QueryAnswer::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.QueryAnswer.id)
}

// string sn = 2;
void QueryAnswer::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryAnswer::sn() const {
  // @@protoc_insertion_point(field_get:eh2tech.QueryAnswer.sn)
  return sn_.GetNoArena();
}
void QueryAnswer::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eh2tech.QueryAnswer.sn)
}
#if LANG_CXX11
void QueryAnswer::set_sn(::std::string&& value) {
  
  sn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eh2tech.QueryAnswer.sn)
}
#endif
void QueryAnswer::set_sn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eh2tech.QueryAnswer.sn)
}
void QueryAnswer::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eh2tech.QueryAnswer.sn)
}
::std::string* QueryAnswer::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:eh2tech.QueryAnswer.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryAnswer::release_sn() {
  // @@protoc_insertion_point(field_release:eh2tech.QueryAnswer.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryAnswer::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:eh2tech.QueryAnswer.sn)
}

// int64 cat = 3;
void QueryAnswer::clear_cat() {
  cat_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 QueryAnswer::cat() const {
  // @@protoc_insertion_point(field_get:eh2tech.QueryAnswer.cat)
  return cat_;
}
void QueryAnswer::set_cat(::google::protobuf::int64 value) {
  
  cat_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.QueryAnswer.cat)
}

// repeated int64 data = 4;
int QueryAnswer::data_size() const {
  return data_.size();
}
void QueryAnswer::clear_data() {
  data_.Clear();
}
::google::protobuf::int64 QueryAnswer::data(int index) const {
  // @@protoc_insertion_point(field_get:eh2tech.QueryAnswer.data)
  return data_.Get(index);
}
void QueryAnswer::set_data(int index, ::google::protobuf::int64 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:eh2tech.QueryAnswer.data)
}
void QueryAnswer::add_data(::google::protobuf::int64 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:eh2tech.QueryAnswer.data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
QueryAnswer::data() const {
  // @@protoc_insertion_point(field_list:eh2tech.QueryAnswer.data)
  return data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
QueryAnswer::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:eh2tech.QueryAnswer.data)
  return &data_;
}

// string comments = 5;
void QueryAnswer::clear_comments() {
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryAnswer::comments() const {
  // @@protoc_insertion_point(field_get:eh2tech.QueryAnswer.comments)
  return comments_.GetNoArena();
}
void QueryAnswer::set_comments(const ::std::string& value) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eh2tech.QueryAnswer.comments)
}
#if LANG_CXX11
void QueryAnswer::set_comments(::std::string&& value) {
  
  comments_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eh2tech.QueryAnswer.comments)
}
#endif
void QueryAnswer::set_comments(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eh2tech.QueryAnswer.comments)
}
void QueryAnswer::set_comments(const char* value, size_t size) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eh2tech.QueryAnswer.comments)
}
::std::string* QueryAnswer::mutable_comments() {
  
  // @@protoc_insertion_point(field_mutable:eh2tech.QueryAnswer.comments)
  return comments_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryAnswer::release_comments() {
  // @@protoc_insertion_point(field_release:eh2tech.QueryAnswer.comments)
  
  return comments_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryAnswer::set_allocated_comments(::std::string* comments) {
  if (comments != NULL) {
    
  } else {
    
  }
  comments_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comments);
  // @@protoc_insertion_point(field_set_allocated:eh2tech.QueryAnswer.comments)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Setting_CatFreq::kCatFieldNumber;
const int Setting_CatFreq::kFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Setting_CatFreq::Setting_CatFreq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_remote_5fpower_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eh2tech.Setting.CatFreq)
}
Setting_CatFreq::Setting_CatFreq(const Setting_CatFreq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cat_, &from.cat_,
    reinterpret_cast<char*>(&freq_) -
    reinterpret_cast<char*>(&cat_) + sizeof(freq_));
  // @@protoc_insertion_point(copy_constructor:eh2tech.Setting.CatFreq)
}

void Setting_CatFreq::SharedCtor() {
  ::memset(&cat_, 0, reinterpret_cast<char*>(&freq_) -
    reinterpret_cast<char*>(&cat_) + sizeof(freq_));
  _cached_size_ = 0;
}

Setting_CatFreq::~Setting_CatFreq() {
  // @@protoc_insertion_point(destructor:eh2tech.Setting.CatFreq)
  SharedDtor();
}

void Setting_CatFreq::SharedDtor() {
}

void Setting_CatFreq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Setting_CatFreq::descriptor() {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Setting_CatFreq& Setting_CatFreq::default_instance() {
  protobuf_remote_5fpower_2eproto::InitDefaults();
  return *internal_default_instance();
}

Setting_CatFreq* Setting_CatFreq::New(::google::protobuf::Arena* arena) const {
  Setting_CatFreq* n = new Setting_CatFreq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Setting_CatFreq::Clear() {
// @@protoc_insertion_point(message_clear_start:eh2tech.Setting.CatFreq)
  ::memset(&cat_, 0, reinterpret_cast<char*>(&freq_) -
    reinterpret_cast<char*>(&cat_) + sizeof(freq_));
}

bool Setting_CatFreq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eh2tech.Setting.CatFreq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .eh2tech.Catalog cat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cat(static_cast< ::eh2tech::Catalog >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 freq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eh2tech.Setting.CatFreq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eh2tech.Setting.CatFreq)
  return false;
#undef DO_
}

void Setting_CatFreq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eh2tech.Setting.CatFreq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eh2tech.Catalog cat = 1;
  if (this->cat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cat(), output);
  }

  // uint32 freq = 2;
  if (this->freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->freq(), output);
  }

  // @@protoc_insertion_point(serialize_end:eh2tech.Setting.CatFreq)
}

::google::protobuf::uint8* Setting_CatFreq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eh2tech.Setting.CatFreq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eh2tech.Catalog cat = 1;
  if (this->cat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cat(), target);
  }

  // uint32 freq = 2;
  if (this->freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->freq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eh2tech.Setting.CatFreq)
  return target;
}

size_t Setting_CatFreq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eh2tech.Setting.CatFreq)
  size_t total_size = 0;

  // .eh2tech.Catalog cat = 1;
  if (this->cat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cat());
  }

  // uint32 freq = 2;
  if (this->freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Setting_CatFreq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eh2tech.Setting.CatFreq)
  GOOGLE_DCHECK_NE(&from, this);
  const Setting_CatFreq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Setting_CatFreq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eh2tech.Setting.CatFreq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eh2tech.Setting.CatFreq)
    MergeFrom(*source);
  }
}

void Setting_CatFreq::MergeFrom(const Setting_CatFreq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eh2tech.Setting.CatFreq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cat() != 0) {
    set_cat(from.cat());
  }
  if (from.freq() != 0) {
    set_freq(from.freq());
  }
}

void Setting_CatFreq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eh2tech.Setting.CatFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Setting_CatFreq::CopyFrom(const Setting_CatFreq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eh2tech.Setting.CatFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setting_CatFreq::IsInitialized() const {
  return true;
}

void Setting_CatFreq::Swap(Setting_CatFreq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Setting_CatFreq::InternalSwap(Setting_CatFreq* other) {
  std::swap(cat_, other->cat_);
  std::swap(freq_, other->freq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Setting_CatFreq::GetMetadata() const {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Setting_CatFreq

// .eh2tech.Catalog cat = 1;
void Setting_CatFreq::clear_cat() {
  cat_ = 0;
}
::eh2tech::Catalog Setting_CatFreq::cat() const {
  // @@protoc_insertion_point(field_get:eh2tech.Setting.CatFreq.cat)
  return static_cast< ::eh2tech::Catalog >(cat_);
}
void Setting_CatFreq::set_cat(::eh2tech::Catalog value) {
  
  cat_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Setting.CatFreq.cat)
}

// uint32 freq = 2;
void Setting_CatFreq::clear_freq() {
  freq_ = 0u;
}
::google::protobuf::uint32 Setting_CatFreq::freq() const {
  // @@protoc_insertion_point(field_get:eh2tech.Setting.CatFreq.freq)
  return freq_;
}
void Setting_CatFreq::set_freq(::google::protobuf::uint32 value) {
  
  freq_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Setting.CatFreq.freq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Setting::kIdFieldNumber;
const int Setting::kCatfreqFieldNumber;
const int Setting::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Setting::Setting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_remote_5fpower_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eh2tech.Setting)
}
Setting::Setting(const Setting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      catfreq_(from.catfreq_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:eh2tech.Setting)
}

void Setting::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_) + sizeof(action_));
  _cached_size_ = 0;
}

Setting::~Setting() {
  // @@protoc_insertion_point(destructor:eh2tech.Setting)
  SharedDtor();
}

void Setting::SharedDtor() {
}

void Setting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Setting::descriptor() {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Setting& Setting::default_instance() {
  protobuf_remote_5fpower_2eproto::InitDefaults();
  return *internal_default_instance();
}

Setting* Setting::New(::google::protobuf::Arena* arena) const {
  Setting* n = new Setting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:eh2tech.Setting)
  catfreq_.Clear();
  ::memset(&id_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_) + sizeof(action_));
}

bool Setting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eh2tech.Setting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .eh2tech.Setting.CatFreq catfreq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_catfreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eh2tech.Setting.Action action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::eh2tech::Setting_Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eh2tech.Setting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eh2tech.Setting)
  return false;
#undef DO_
}

void Setting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eh2tech.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .eh2tech.Setting.CatFreq catfreq = 2;
  for (unsigned int i = 0, n = this->catfreq_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->catfreq(i), output);
  }

  // .eh2tech.Setting.Action action = 3;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // @@protoc_insertion_point(serialize_end:eh2tech.Setting)
}

::google::protobuf::uint8* Setting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eh2tech.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .eh2tech.Setting.CatFreq catfreq = 2;
  for (unsigned int i = 0, n = this->catfreq_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->catfreq(i), deterministic, target);
  }

  // .eh2tech.Setting.Action action = 3;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eh2tech.Setting)
  return target;
}

size_t Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eh2tech.Setting)
  size_t total_size = 0;

  // repeated .eh2tech.Setting.CatFreq catfreq = 2;
  {
    unsigned int count = this->catfreq_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->catfreq(i));
    }
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .eh2tech.Setting.Action action = 3;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Setting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eh2tech.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  const Setting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Setting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eh2tech.Setting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eh2tech.Setting)
    MergeFrom(*source);
  }
}

void Setting::MergeFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eh2tech.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  catfreq_.MergeFrom(from.catfreq_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void Setting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eh2tech.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Setting::CopyFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eh2tech.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setting::IsInitialized() const {
  return true;
}

void Setting::Swap(Setting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Setting::InternalSwap(Setting* other) {
  catfreq_.InternalSwap(&other->catfreq_);
  std::swap(id_, other->id_);
  std::swap(action_, other->action_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Setting::GetMetadata() const {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Setting

// int64 id = 1;
void Setting::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Setting::id() const {
  // @@protoc_insertion_point(field_get:eh2tech.Setting.id)
  return id_;
}
void Setting::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Setting.id)
}

// repeated .eh2tech.Setting.CatFreq catfreq = 2;
int Setting::catfreq_size() const {
  return catfreq_.size();
}
void Setting::clear_catfreq() {
  catfreq_.Clear();
}
const ::eh2tech::Setting_CatFreq& Setting::catfreq(int index) const {
  // @@protoc_insertion_point(field_get:eh2tech.Setting.catfreq)
  return catfreq_.Get(index);
}
::eh2tech::Setting_CatFreq* Setting::mutable_catfreq(int index) {
  // @@protoc_insertion_point(field_mutable:eh2tech.Setting.catfreq)
  return catfreq_.Mutable(index);
}
::eh2tech::Setting_CatFreq* Setting::add_catfreq() {
  // @@protoc_insertion_point(field_add:eh2tech.Setting.catfreq)
  return catfreq_.Add();
}
::google::protobuf::RepeatedPtrField< ::eh2tech::Setting_CatFreq >*
Setting::mutable_catfreq() {
  // @@protoc_insertion_point(field_mutable_list:eh2tech.Setting.catfreq)
  return &catfreq_;
}
const ::google::protobuf::RepeatedPtrField< ::eh2tech::Setting_CatFreq >&
Setting::catfreq() const {
  // @@protoc_insertion_point(field_list:eh2tech.Setting.catfreq)
  return catfreq_;
}

// .eh2tech.Setting.Action action = 3;
void Setting::clear_action() {
  action_ = 0;
}
::eh2tech::Setting_Action Setting::action() const {
  // @@protoc_insertion_point(field_get:eh2tech.Setting.action)
  return static_cast< ::eh2tech::Setting_Action >(action_);
}
void Setting::set_action(::eh2tech::Setting_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Setting.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Empty::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_remote_5fpower_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:eh2tech.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:eh2tech.Empty)
}

void Empty::SharedCtor() {
  id_ = 0;
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:eh2tech.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Empty& Empty::default_instance() {
  protobuf_remote_5fpower_2eproto::InitDefaults();
  return *internal_default_instance();
}

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:eh2tech.Empty)
  id_ = 0;
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eh2tech.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eh2tech.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eh2tech.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eh2tech.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:eh2tech.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:eh2tech.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:eh2tech.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:eh2tech.Empty)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:eh2tech.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:eh2tech.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:eh2tech.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:eh2tech.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:eh2tech.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:eh2tech.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_remote_5fpower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_remote_5fpower_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

// int32 id = 1;
void Empty::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 Empty::id() const {
  // @@protoc_insertion_point(field_get:eh2tech.Empty.id)
  return id_;
}
void Empty::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:eh2tech.Empty.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace eh2tech

// @@protoc_insertion_point(global_scope)
